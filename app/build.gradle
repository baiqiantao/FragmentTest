apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    //*******************************************************************************************************************************
    //                                                                                         【defaultConfig】
    //*******************************************************************************************************************************
    defaultConfig {
        applicationId "com.bqt.test"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionName rootProject.ext.android["versionName"]
        versionCode rootProject.ext.android["versionCode"]

        flavorDimensions "bqt" //必须带上一个 flavorDimensions[维度、尺寸]，值可以随意
        testInstrumentationRunner "android.support.com.bqt.test.runner.AndroidJUnitRunner"
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // 放在这里可以在任何地方获取到。key可以不必用引号括起来，但是字符串类型的值必须使用【'"】和【"'】括起来才可以
        // 否则，值最匹配什么类型就是什么类型。比如【"1"】和【"@drawable/icon"】是int类型，而【'"1"'】才代表字符串类型
        manifestPlaceholders = [release_time_value: releaseTime()]
    }

    //*******************************************************************************************************************************
    //                                                                                          【signingConfigs】
    //*******************************************************************************************************************************
    signingConfigs { //配置签名信息，例如各个不同产品的签名文件位置、密码、昵称、昵称密码等，要放在 buildTypes 上面配置
        beakeystore { //除了默认的 debug 签名外，signingConfigs 中的其他签名必须完整的配置签名相关的信息
            storeFile file('../config/bea.keystore')
            storePassword 'beachinambk'
            keyAlias 'bea.keystore'
            keyPassword 'beachinambk'

            v2SigningEnabled true
        }

        debug { //默认的 debug 签名，不需要指定签名信息，当然你也可以专门生成并配置一个 debug 签名
            v2SigningEnabled true
        }

        beakeystore2.initWith(beakeystore)  //initWith的作用是：拷贝指定签名 beakeystore 中的所有配置到新的签名中
        beakeystore2 {
            storeFile file('../config/bea2.keystore') //除了签名文件不一样外，密码、昵称、昵称密码等和 beakeystore 完全一样
        }
    }

    //*******************************************************************************************************************************
    //                                                                                          【buildTypes】
    //*******************************************************************************************************************************
    buildTypes { // 用于区分release包和debug等不同构建类型的包。默认正式签名时会走release脚本，调试签名时会走debug脚本
        release {
            debuggable false //是否可调试。debug模式默认为true，release模式默认是false
            zipAlignEnabled true// 是否启用Zipalign优化，对齐app所有资源。因为对齐处理发生在签名之后，所以启用时必须指定了签名信息
            shrinkResources true// 在构建时是否自动移除无用的资源以减小apk包的大小(包括图片,布局,菜单等，但不包括value资源文件)

            minifyEnabled true //是否启用混淆。debug与release的默认值都为false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' //配置混淆文件所在路径
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            consumerProguardFiles 'consumer-proguard-rules.pro'

            signingConfig signingConfigs.beakeystore //使用自己配置的签名信息

            manifestPlaceholders = [baidu_map_key_value: "20094"]  //注意，这里的值用双引号括起来并不代表其就是String类型
            buildConfigField "String", "BASE_URL", '"http://110.com/"' //自定义属性，可以在 BuildConfig 中获取设置的值
        }

        debug {
            signingConfig signingConfigs.debug  //使用默认的 debug 签名，即使不配置，也是使用的此默认签名

            manifestPlaceholders = [baidu_map_key_value: "10086"]  //注意，这里的值用双引号括起来并不代表其就是String类型
            buildConfigField "String", "BASE_URL", '"http://120.com/"' //自定义属性，可以在 BuildConfig 中获取设置的值
        }

        pre.initWith(release) //initWith的作用是：拷贝指定构建类型 release 中的所有变量到 pre，然后gradle就会自动生成新的task
        pre { //预发布版本，该版本除了下面指定的配置与release版本不同外，其他都与release相同
            debuggable true
        }
    }

    //*******************************************************************************************************************************
    //                                                                                          【productFlavors】
    //*******************************************************************************************************************************
    productFlavors { //用于为不同的产品分配专有属性；构建基于同一份代码的不同Android项目有差异的部分；多渠道打包
        productA {  //新建产品productA，在defaultConfig的基础上做修改
            applicationId "com.bqt.test.productA"  // defaultConfig 中可以设置的属性在这里基本也都可以设置

            resValue "string", "app_icon_name", "产品A" //替换掉指定的资源文件，比如应用名
            resValue "color", "color_footer", "#ffff0000" //替换掉的资源可以是没有定义过的

            buildConfigField "boolean", "isHongkongUser", "true"//自定义属性，可以在 BuildConfig 中获取设置的值
            buildConfigField "int", "countryCode", "20094"//自定义属性，可以在 BuildConfig 中获取设置的值

            manifestPlaceholders = [app_logo         : "@drawable/icon",//用于替换清单文件中的标签，比如应用logo，多渠道信息
                                    app_channel_value: "小米应用市场",
            ]
        }

        productB {  //新建产品productB
            applicationIdSuffix ".productB" //在defaultConfig中默认applicationId的基础上在后面追加一段
            versionNameSuffix "_productB" //在defaultConfig中默认versionName的基础上在后面追加一段

            resValue "string", "app_icon_name", "产品B" //替换掉指定的资源文件，比如应用名
            resValue "color", "color_footer", "#ff0000ff" //替换掉的资源可以是没有定义过的

            buildConfigField "boolean", "isHongkongUser", "false"//自定义属性，可以在 BuildConfig 中获取设置的值
            buildConfigField "int", "countryCode", "20095"//自定义属性，可以在 BuildConfig 中获取设置的值

            manifestPlaceholders = [app_logo         : "@drawable/icon2",//用于替换清单文件中的标签，比如应用logo，多渠道信息
                                    app_channel_value: "应用宝",
            ]
        }

        // 批量处理所有的 productFlavors，常用于多渠道打包时的统一配置渠道名等信息
        productFlavors.all {
            //注意，这里配置后会覆盖掉上面每个Flavor已配置的 manifestPlaceholders ，所以设置时要保证上面配置的所有标签都要有才行
            //flavor -> flavor.manifestPlaceholders = [app_logo: "@drawable/icon2", app_channel_value: name + " 首发"]
        }

        //自定义所有输出的APK包的位置与名称，多渠道打包时也非常有用，如果不设置，每个Flavor构建的APK都会
        android.applicationVariants.all { variant ->
            def sep = "_"  //分隔符
            def time = releaseTime()  //打包时间
            def buildType = variant.buildType.name  //构建类型，比如 release 或 debug
            def versionCode = variant.versionCode  //版本号
            variant.outputs.all { output ->
                variant.productFlavors.each { flavor ->
                    def applicationId = flavor.applicationId == null ? defaultConfig.applicationId : flavor.applicationId // flavor没配置时为空
                    def flavorName = flavor.name //应用名
                    def channelName = flavor.manifestPlaceholders["app_channel_value"] //渠道名

                    if (buildType == "release") { //变更输出路径。变更后会导致通过Run方式构建的Apk无法自动安装
                        def apkPath = project.rootDir.absolutePath + "/apks/${applicationId}/" //可以通过占位符【${}】或【+】来拼接字符串
                        variant.getPackageApplication().outputDirectory = new File(apkPath)
                    }
                    def apkName = flavorName + sep + buildType + sep + channelName + sep + "v" + versionCode + sep + time + ".apk"
                    println "【文件名】" + apkName //例如【productB_release_应用宝_v16_20180719_21.18.15_星期四.apk】
                    output.outputFileName = apkName  //重新对apk命名
                    //注意，Gradle4.0以下版本对apk重命名的方式为：variant.outputFile = new File(variant.outputFile.parent, apkName)
                }
            }
        }
    }
}

//***********************************************************************************************************************************
//                                                                                          【dependencies】
//***********************************************************************************************************************************
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["support_v7"] // android support library
    implementation rootProject.ext.dependencies["gson"] // gson
}

static def releaseTime() {
    return new Date().format("yyyyMMdd_HH.mm.ss_E", TimeZone.getDefault()) // 或 TimeZone.getTimeZone("GMT+08:00")
}